<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Study Tracker Pro 1</title>
    <link
      rel="manifest"
      href="data:application/json;base64,eyJuYW1lIjoiU3R1ZHkgVHJhY2tlciBQcm8iLCJzaG9ydF9uYW1lIjoiU3R1ZHlUcmFja2VyIiwic3RhcnRfdXJsIjoiLyIsImRpc3BsYXkiOiJzdGFuZGFsb25lIiwiYmFja2dyb3VuZF9jb2xvciI6IiM2NjNhYjciLCJ0aGVtZV9jb2xvciI6IiM2NjNhYjciLCJpY29ucyI6W3sic3JjIjoiZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M00zUXViM0puTHpJd01EQXZjM1puSWlCMmFXVjNRbTk0UFNJd0lEQWdOVEV5SURRNU1pSStQR05wY21Oc1pTQmplRDBpTWpVMklpQmplVDBpTWpRMklpQnlQU0l5TURBY1NqNXpkSGx1WlQxaVptbHNiRG9qUmpRelFUa3hPejE4UEM5amFYSmpiR1UrUEhCaGRHZ2dkRDBpVFRJMk5TNHhJRFF3TlM0eUxqRWdNakF3TGprZTRRaUlIQTJPREExTGpGZ1ZrNG1NVVV6T1M0MUlEUXlPUzQzVDJWNFAyNWdVV2c0T1RJdEluZ2dVVGQxWW05M1kyUm9URGc1TnpKV2JuUndkSGRaZW5KdWVYRTJVMm95WWtsS0lIdGNiWGxzYjNwc09XeGlWV1pIZUQxSWVscHNlbXQzVTFOck5qSnlhM1p0YzA1Zk9VbGthbVV0Umk1OU1Xc2dNaTQzWXowNU16VXRPRGN5T1RrNUxUZzNNVEkzT1RraWZtZGxibDFZTVRZdE5qZ3RObUppYlRFeUxUUXhNek11YzA5bE1XVTRlVEE1YzJkdFpYTlNabHBvTldOVE5ESjFVMUo0YXpKTGRFSkNNbTV6ZUdOUVNtTjBRek5LWWw0NGJWZGphWFlyWW05dVluUjRWbGgyYzNsU2J6ZHJOVkJvSXprZ0puc2dkRzVpS2ladnduOWZNVWNnWTJGamFHZ2xnMUZ4Y2lNd1BxaXBhSGwxZDFjOU5pb2JtVnpjazE1WkdsdldHeElORzVwTTI0d05DSmNkR2s0WmlzdlBEOTBhR2xwUlRKVk1sWm1MeXdtUG14YVNGNGhWVWRVUXlKY2VXSllVa3hPUVVkeVZuWnZkR0E5UEM5d1lYUm9QajE4YzNabkBnPT0iLCJzaXplcyI6IjUxMng1MTIiLCJ0eXBlIjoiaW1hZ2Uvc3ZnK3htbCJ9XX0="
    />
    <link
      rel="icon"
      type="image/svg+xml"
      href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23663ab7' d='M12 2L2 7v10c0 5.55 3.84 12 9 12s9-6.45 9-12V7l-10-5z'/%3E%3C/svg%3E"
    />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        color: #333;
      }

      .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
      }

      .header {
        text-align: center;
        margin-bottom: 30px;
        padding: 20px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 20px;
        backdrop-filter: blur(10px);
      }

      .header h1 {
        color: white;
        font-size: 2.5rem;
        margin-bottom: 10px;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
      }

      .motivation-card {
        background: linear-gradient(
          135deg,
          #ff9a9e 0%,
          #fecfef 50%,
          #fecfef 100%
        );
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        animation: fadeIn 1s ease-in;
        position: relative;
      }

      .motivation-text {
        font-size: 1.1rem;
        font-weight: 500;
        text-align: center;
        color: #444;
      }

      .edit-motivation-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        background: rgba(255, 255, 255, 0.7);
        border: none;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        cursor: pointer;
        font-size: 14px;
      }

      .tabs {
        display: flex;
        justify-content: center;
        margin-bottom: 30px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 15px;
        padding: 5px;
        flex-wrap: wrap;
      }

      .tab {
        flex: 1;
        min-width: 100px;
        padding: 15px;
        text-align: center;
        background: transparent;
        border: none;
        color: white;
        font-size: 0.9rem;
        font-weight: 600;
        cursor: pointer;
        border-radius: 10px;
        transition: all 0.3s ease;
        margin: 2px;
      }

      .tab.active {
        background: rgba(255, 255, 255, 0.2);
        transform: scale(1.05);
      }

      .tab-content {
        display: none;
      }

      .tab-content.active {
        display: block;
        animation: slideIn 0.5s ease;
      }

      .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
      }

      .stat-card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 15px;
        padding: 25px;
        text-align: center;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
      }

      .stat-card:hover {
        transform: translateY(-5px);
      }

      .stat-number {
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 10px;
      }

      .viola-stat {
        color: #e74c3c;
      }
      .az-stat {
        color: #3498db;
      }
      .conducting-stat {
        color: #2ecc71;
      }

      .progress-bar {
        width: 100%;
        height: 10px;
        background: #ecf0f1;
        border-radius: 5px;
        margin: 10px 0;
        overflow: hidden;
      }

      .progress-fill {
        height: 100%;
        border-radius: 5px;
        transition: width 1s ease;
      }

      .viola-progress {
        background: linear-gradient(90deg, #e74c3c, #c0392b);
      }
      .az-progress {
        background: linear-gradient(90deg, #3498db, #2980b9);
      }
      .conducting-progress {
        background: linear-gradient(90deg, #2ecc71, #27ae60);
      }

      .task-list {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 20px;
      }

      .task-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 15px;
        margin-bottom: 10px;
        background: #f8f9fa;
        border-radius: 10px;
        border-left: 4px solid #ddd;
        transition: all 0.3s ease;
        flex-wrap: wrap;
        gap: 10px;
      }

      .task-item:hover {
        transform: translateX(5px);
      }

      .task-item.completed {
        opacity: 0.7;
      }

      .task-item.viola {
        border-left-color: #e74c3c;
      }
      .task-item.az204 {
        border-left-color: #3498db;
      }
      .task-item.conducting {
        border-left-color: #2ecc71;
      }

      .task-main {
        display: flex;
        align-items: center;
        flex: 1;
        min-width: 300px;
      }

      .task-checkbox {
        width: 20px;
        height: 20px;
        margin-right: 15px;
        cursor: pointer;
      }

      .task-text {
        flex: 1;
        font-weight: 500;
      }

      .task-actions {
        display: flex;
        gap: 5px;
        flex-wrap: wrap;
      }

      .task-btn {
        background: #3498db;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 15px;
        font-size: 0.8rem;
        cursor: pointer;
        transition: all 0.3s ease;
      }

      .task-btn:hover {
        transform: scale(1.05);
      }

      .task-btn.start {
        background: #2ecc71;
      }
      .task-btn.edit {
        background: #f39c12;
      }
      .task-btn.copy {
        background: #9b59b6;
      }
      .task-btn.delete {
        background: #e74c3c;
      }

      .task-time {
        background: #ecf0f1;
        padding: 5px 10px;
        border-radius: 15px;
        font-size: 0.9rem;
        color: #7f8c8d;
      }

      .task-note {
        width: 100%;
        font-size: 0.9rem;
        color: #7f8c8d;
        font-style: italic;
        margin-top: 5px;
      }

      .add-task-btn {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 15px 30px;
        border-radius: 25px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        margin: 10px;
        transition: all 0.3s ease;
      }

      .add-task-btn:hover {
        transform: scale(1.05);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
      }

      .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1000;
      }

      .modal-content {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        border-radius: 20px;
        padding: 30px;
        min-width: 300px;
        max-width: 90vw;
        max-height: 90vh;
        overflow-y: auto;
      }

      .form-group {
        margin-bottom: 20px;
      }

      .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 600;
      }

      .form-group input,
      .form-group select,
      .form-group textarea {
        width: 100%;
        padding: 12px;
        border: 2px solid #ecf0f1;
        border-radius: 10px;
        font-size: 1rem;
        transition: border-color 0.3s ease;
      }

      .form-group input:focus,
      .form-group select:focus,
      .form-group textarea:focus {
        outline: none;
        border-color: #667eea;
      }

      .rewards-section {
        background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 20px;
        text-align: center;
      }

      .reward-badge {
        display: inline-block;
        background: #f39c12;
        color: white;
        padding: 10px 20px;
        border-radius: 25px;
        margin: 5px;
        font-weight: 600;
        animation: bounce 2s infinite;
      }

      .weekly-chart {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 20px;
      }

      .chart-container {
        height: 300px;
        position: relative;
      }

      /* Timer Styles */
      .timer-container {
        text-align: center;
        padding: 40px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 20px;
        margin-bottom: 20px;
      }

      .timer-display {
        font-size: 4rem;
        font-weight: bold;
        margin: 20px 0;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
      }

      .timer-controls {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin: 20px 0;
      }

      .timer-btn {
        background: rgba(255, 255, 255, 0.2);
        color: white;
        border: 2px solid white;
        padding: 15px 30px;
        border-radius: 25px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
      }

      .timer-btn:hover {
        background: white;
        color: #667eea;
      }

      /* Metronome Styles */
      .metronome-container {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 15px;
        padding: 30px;
        text-align: center;
        margin-bottom: 20px;
      }

      .bpm-display {
        font-size: 3rem;
        font-weight: bold;
        margin: 20px 0;
        color: #2ecc71;
      }

      .bpm-controls {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 20px;
        margin: 20px 0;
      }

      .bpm-btn {
        background: #2ecc71;
        color: white;
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        font-size: 1.5rem;
        cursor: pointer;
        transition: all 0.3s ease;
      }

      .bpm-btn:hover {
        transform: scale(1.1);
      }

      .metronome-indicator {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background: #e74c3c;
        margin: 20px auto;
        transition: all 0.1s ease;
      }

      .metronome-indicator.beat {
        background: #2ecc71;
        transform: scale(1.5);
      }

      /* Weekly View Styles */
      .week-navigation {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        background: rgba(255, 255, 255, 0.95);
        padding: 15px;
        border-radius: 15px;
      }

      .week-nav-btn {
        background: #3498db;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 10px;
        cursor: pointer;
      }

      .week-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 10px;
        margin-bottom: 20px;
      }

      .day-card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 10px;
        padding: 15px;
        min-height: 200px;
      }

      .day-header {
        font-weight: bold;
        margin-bottom: 10px;
        color: #333;
      }

      .day-task {
        background: #f8f9fa;
        padding: 5px 10px;
        margin: 5px 0;
        border-radius: 5px;
        font-size: 0.8rem;
        border-left: 3px solid #ddd;
      }

      /* History Management */
      .history-controls {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 20px;
      }

      .history-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        border-bottom: 1px solid #eee;
      }

      .storage-info {
        background: #3498db;
        color: white;
        padding: 10px;
        border-radius: 10px;
        margin-bottom: 15px;
        text-align: center;
      }

      /* Animations */
      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      @keyframes slideIn {
        from {
          opacity: 0;
          transform: translateX(-20px);
        }
        to {
          opacity: 1;
          transform: translateX(0);
        }
      }

      @keyframes bounce {
        0%,
        20%,
        50%,
        80%,
        100% {
          transform: translateY(0);
        }
        40% {
          transform: translateY(-10px);
        }
        60% {
          transform: translateY(-5px);
        }
      }

      @keyframes pulse {
        0% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.1);
        }
        100% {
          transform: scale(1);
        }
      }

      @keyframes completionCelebration {
        0% {
          transform: scale(1);
        }
        25% {
          transform: scale(1.2) rotate(-5deg);
        }
        50% {
          transform: scale(1.1) rotate(5deg);
        }
        75% {
          transform: scale(1.2) rotate(-5deg);
        }
        100% {
          transform: scale(1);
        }
      }

      .completion-animation {
        animation: completionCelebration 1s ease-in-out;
      }

      .notification-permission {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        color: white;
        padding: 15px;
        border-radius: 10px;
        margin-bottom: 20px;
        text-align: center;
      }

      .notification-btn {
        background: rgba(255, 255, 255, 0.2);
        color: white;
        border: 2px solid white;
        padding: 10px 20px;
        border-radius: 20px;
        cursor: pointer;
        font-weight: 600;
        margin-top: 10px;
      }

      @media (max-width: 768px) {
        .container {
          padding: 10px;
        }
        .header h1 {
          font-size: 2rem;
        }
        .stats-grid {
          grid-template-columns: 1fr;
        }
        .tabs {
          flex-direction: column;
        }
        .tab {
          margin-bottom: 5px;
        }
        .timer-display {
          font-size: 3rem;
        }
        .week-grid {
          grid-template-columns: 1fr;
        }
        .task-item {
          flex-direction: column;
          align-items: stretch;
        }
        .task-main {
          min-width: auto;
        }
        .timer-controls {
          flex-direction: column;
          align-items: center;
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="header">
        <h1>🎼 Study Tracker Pro</h1>
        <p style="color: rgba(255, 255, 255, 0.9)">
          Tu compañero para el éxito musical y profesional
        </p>
      </div>

      <div
        id="notificationPermission"
        class="notification-permission"
        style="display: none"
      >
        <h3>🔔 Activa las Notificaciones</h3>
        <p>Recibe recordatorios para mantener tu práctica constante</p>
        <button
          class="notification-btn"
          onclick="requestNotificationPermission()"
        >
          Activar Notificaciones
        </button>
      </div>

      <div class="motivation-card">
        <button class="edit-motivation-btn" onclick="openMotivationModal()">
          ✏️
        </button>
        <div class="motivation-text" id="dailyMotivation">
          Cargando motivación diaria...
        </div>
      </div>

      <div class="rewards-section" id="rewardsSection" style="display: none">
        <h3>🏆 ¡Recompensas Ganadas!</h3>
        <div id="rewardsBadges"></div>
      </div>

      <div class="tabs">
        <button class="tab active" onclick="showTab('dashboard')">
          📊 Dashboard
        </button>
        <button class="tab" onclick="showTab('viola')">🎻 Viola</button>
        <button class="tab" onclick="showTab('az204')">💻 AZ-204</button>
        <button class="tab" onclick="showTab('conducting')">
          🎼 Dirección
        </button>
        <button class="tab" onclick="showTab('weekly')">📅 Semanal</button>
        <button class="tab" onclick="showTab('timer')">⏱️ Timer</button>
        <button class="tab" onclick="showTab('practice')">🎵 Práctica</button>
        <button class="tab" onclick="showTab('analytics')">📈 Análisis</button>
        <button class="tab" onclick="showTab('settings')">⚙️ Config</button>
      </div>

      <div id="dashboard" class="tab-content active">
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-number viola-stat" id="violaWeeklyHours">0h</div>
            <div>Viola esta semana</div>
            <div class="progress-bar">
              <div
                class="progress-fill viola-progress"
                id="violaProgress"
                style="width: 0%"
              ></div>
            </div>
          </div>
          <div class="stat-card">
            <div class="stat-number az-stat" id="azWeeklyHours">0h</div>
            <div>AZ-204 esta semana</div>
            <div class="progress-bar">
              <div
                class="progress-fill az-progress"
                id="azProgress"
                style="width: 0%"
              ></div>
            </div>
          </div>
          <div class="stat-card">
            <div class="stat-number conducting-stat" id="conductingWeeklyHours">
              0h
            </div>
            <div>Dirección esta semana</div>
            <div class="progress-bar">
              <div
                class="progress-fill conducting-progress"
                id="conductingProgress"
                style="width: 0%"
              ></div>
            </div>
          </div>
        </div>

        <div class="task-list">
          <h3>📋 Tareas de Hoy</h3>
          <div id="todayTasks"></div>
          <button class="add-task-btn" onclick="openAddTaskModal()">
            + Agregar Tarea
          </button>
          <button class="add-task-btn" onclick="copyYesterdayTasks()">
            📋 Copiar del Ayer
          </button>
        </div>
      </div>

      <div id="viola" class="tab-content">
        <div class="task-list">
          <h3>🎻 Práctica de Viola</h3>
          <div id="violaTasks"></div>
          <button class="add-task-btn" onclick="openAddTaskModal('viola')">
            + Agregar Tarea de Viola
          </button>
        </div>
      </div>

      <div id="az204" class="tab-content">
        <div class="task-list">
          <h3>💻 Certificación AZ-204</h3>
          <div id="azTasks"></div>
          <button class="add-task-btn" onclick="openAddTaskModal('az204')">
            + Agregar Tarea AZ-204
          </button>
        </div>
      </div>

      <div id="conducting" class="tab-content">
        <div class="task-list">
          <h3>🎼 Dirección de Orquesta</h3>
          <div id="conductingTasks"></div>
          <button class="add-task-btn" onclick="openAddTaskModal('conducting')">
            + Agregar Tarea de Dirección
          </button>
        </div>
      </div>

      <div id="weekly" class="tab-content">
        <div class="week-navigation">
          <button class="week-nav-btn" onclick="changeWeek(-1)">
            ← Anterior
          </button>
          <h3 id="currentWeekTitle">Esta Semana</h3>
          <button class="week-nav-btn" onclick="changeWeek(1)">
            Siguiente →
          </button>
        </div>
        <div class="week-grid" id="weekGrid"></div>
      </div>

      <div id="timer" class="tab-content">
        <div class="timer-container" id="timerContainer">
          <h3 id="timerTaskName">Selecciona una tarea para comenzar</h3>
          <div class="timer-display" id="timerDisplay">00:00</div>
          <div class="timer-controls">
            <button
              class="timer-btn"
              id="startPauseBtn"
              onclick="toggleTimer()"
            >
              ▶️ Iniciar
            </button>
            <button class="timer-btn" onclick="resetTimer()">
              🔄 Reiniciar
            </button>
            <button class="timer-btn" onclick="stopTimer()">⏹️ Terminar</button>
          </div>
          <div id="timerProgress" style="margin-top: 20px"></div>
        </div>
      </div>

      <div id="practice" class="tab-content">
        <div class="metronome-container">
          <h3>🎵 Práctica Libre con Metrónomo</h3>
          <div class="bpm-display" id="bpmDisplay">120</div>
          <div class="bpm-controls">
            <button class="bpm-btn" onclick="changeBPM(-10)">-10</button>
            <button class="bpm-btn" onclick="changeBPM(-1)">-</button>
            <input
              type="range"
              min="40"
              max="200"
              value="120"
              id="bpmSlider"
              oninput="setBPM(this.value)"
              style="margin: 0 20px; flex: 1"
            />
            <button class="bpm-btn" onclick="changeBPM(1)">+</button>
            <button class="bpm-btn" onclick="changeBPM(10)">+10</button>
          </div>
          <div class="metronome-indicator" id="metronomeIndicator"></div>
          <div class="timer-controls">
            <button
              class="timer-btn"
              id="metronomeBtn"
              onclick="toggleMetronome()"
            >
              ▶️ Iniciar Metrónomo
            </button>
          </div>

          <div style="margin-top: 30px">
            <h4>🕒 Cronómetro de Práctica Libre</h4>
            <div class="timer-display" id="practiceTimerDisplay">00:00:00</div>
            <div class="timer-controls">
              <button
                class="timer-btn"
                id="practiceTimerBtn"
                onclick="togglePracticeTimer()"
              >
                ▶️ Iniciar
              </button>
              <button class="timer-btn" onclick="resetPracticeTimer()">
                🔄 Reiniciar
              </button>
              <button class="timer-btn" onclick="savePracticeSession()">
                💾 Guardar Sesión
              </button>
            </div>
          </div>
        </div>
      </div>

      <div id="analytics" class="tab-content">
        <div class="weekly-chart">
          <h3>📊 Progreso Semanal</h3>
          <div class="chart-container" id="weeklyChart"></div>
        </div>

        <div class="stats-grid">
          <div class="stat-card">
            <h4>🎯 Objetivos Completados</h4>
            <div class="stat-number" id="completedGoals">0%</div>
          </div>
          <div class="stat-card">
            <h4>🔥 Racha Actual</h4>
            <div class="stat-number" id="currentStreak">0</div>
            <div>días consecutivos</div>
          </div>
          <div class="stat-card">
            <h4>⚠️ Área de Mejora</h4>
            <div id="improvementArea">Cargando...</div>
          </div>
        </div>

        <div class="history-controls">
          <h3>📚 Historial de Progreso</h3>
          <div class="storage-info">
            <strong>Espacio usado:</strong>
            <span id="storageSize">Calculando...</span>
          </div>
          <div id="historyList"></div>
        </div>
      </div>

      <div id="settings" class="tab-content">
        <div class="task-list">
          <h3>⚙️ Configuración</h3>

          <div style="margin-bottom: 30px">
            <h4>📥 Importar/Exportar Datos</h4>
            <div style="margin: 15px 0">
              <input
                type="file"
                id="importFile"
                accept=".json"
                style="display: none"
                onchange="importData(event)"
              />
              <button
                class="add-task-btn"
                onclick="document.getElementById('importFile').click()"
              >
                📥 Importar JSON
              </button>
              <button class="add-task-btn" onclick="exportData()">
                📤 Exportar JSON
              </button>
              <button class="add-task-btn" onclick="downloadWeekTemplate()">
                📋 Plantilla Semanal
              </button>
            </div>
          </div>

          <div style="margin-bottom: 30px">
            <h4>🗑️ Gestión de Datos</h4>
            <button
              class="add-task-btn"
              onclick="resetProgress()"
              style="background: #e74c3c"
            >
              🔄 Reiniciar Progreso
            </button>
            <button
              class="add-task-btn"
              onclick="clearSelectedHistory()"
              style="background: #f39c12"
            >
              🗂️ Limpiar Historial Seleccionado
            </button>
            <button
              class="add-task-btn"
              onclick="clearAllData()"
              style="background: #c0392b"
            >
              🗑️ Eliminar Todo
            </button>
          </div>

          <div>
            <h4>💬 Motivaciones Personalizadas</h4>
            <div id="motivationsList"></div>
            <button class="add-task-btn" onclick="openMotivationModal()">
              ➕ Agregar Motivación
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Modals -->

    <!-- Add/Edit Task Modal -->
    <div id="addTaskModal" class="modal">
      <div class="modal-content">
        <h3 id="taskModalTitle">➕ Agregar Nueva Tarea</h3>
        <form id="addTaskForm">
          <div class="form-group">
            <label>Descripción:</label>
            <input type="text" id="taskDescription" required />
          </div>
          <div class="form-group">
            <label>Categoría:</label>
            <select id="taskCategory">
              <option value="viola">🎻 Viola</option>
              <option value="az204">💻 AZ-204</option>
              <option value="conducting">🎼 Dirección</option>
            </select>
          </div>
          <div class="form-group">
            <label>Duración (minutos):</label>
            <input
              type="number"
              id="taskDuration"
              min="5"
              max="180"
              value="30"
            />
          </div>
          <div class="form-group">
            <label>Hora programada:</label>
            <input type="time" id="taskTime" />
          </div>
          <div class="form-group">
            <label>Notas (opcional):</label>
            <textarea
              id="taskNote"
              rows="3"
              placeholder="Agregar notas sobre esta tarea..."
            ></textarea>
          </div>
          <div style="text-align: center; margin-top: 20px">
            <button type="submit" class="add-task-btn">Guardar Tarea</button>
            <button
              type="button"
              class="add-task-btn"
              onclick="closeModal()"
              style="background: #95a5a6"
            >
              Cancelar
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Motivation Modal -->
    <div id="motivationModal" class="modal">
      <div class="modal-content">
        <h3>💬 Gestionar Motivaciones</h3>
        <div class="form-group">
          <label>Nueva Motivación:</label>
          <textarea
            id="newMotivation"
            rows="3"
            placeholder="Escribe una motivación inspiradora..."
          ></textarea>
        </div>
        <div style="text-align: center; margin: 20px 0">
          <button class="add-task-btn" onclick="addCustomMotivation()">
            ➕ Agregar
          </button>
          <button
            class="add-task-btn"
            onclick="closeModal()"
            style="background: #95a5a6"
          >
            Cerrar
          </button>
        </div>
        <div
          id="customMotivationsList"
          style="max-height: 300px; overflow-y: auto"
        ></div>
      </div>
    </div>

    <!-- History Selection Modal -->
    <div id="historyModal" class="modal">
      <div class="modal-content">
        <h3>🗂️ Seleccionar Historial para Eliminar</h3>
        <div
          id="historyCheckboxes"
          style="max-height: 400px; overflow-y: auto"
        ></div>
        <div style="text-align: center; margin-top: 20px">
          <button
            class="add-task-btn"
            onclick="deleteSelectedHistory()"
            style="background: #e74c3c"
          >
            🗑️ Eliminar Seleccionados
          </button>
          <button
            class="add-task-btn"
            onclick="closeModal()"
            style="background: #95a5a6"
          >
            Cancelar
          </button>
        </div>
      </div>
    </div>

    <script>
      // Audio Context para sonidos
      let audioContext;
      let metronomeInterval;
      let practiceTimerInterval;
      let timerInterval;
      let currentTask = null;
      let timerStartTime = 0;
      let timerPaused = false;
      let practiceStartTime = 0;
      let practicePaused = false;
      let currentWeekOffset = 0;

      // Inicializar Audio Context
      function initAudio() {
        if (!audioContext) {
          audioContext = new (window.AudioContext ||
            window.webkitAudioContext)();
        }
      }

      // Crear sonido de metrónomo
      function createMetronomeSound() {
        initAudio();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();

        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);

        oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
        oscillator.type = "sine";

        gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(
          0.001,
          audioContext.currentTime + 0.1
        );

        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.1);
      }

      // Crear sonido de finalización
      function createCompletionSound() {
        initAudio();
        const frequencies = [523, 659, 784, 1047]; // C-E-G-C mayor

        frequencies.forEach((freq, index) => {
          setTimeout(() => {
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();

            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);

            oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);
            oscillator.type = "sine";

            gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(
              0.001,
              audioContext.currentTime + 0.5
            );

            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + 0.5);
          }, index * 200);
        });
      }

      // Datos persistentes usando localStorage mejorado
      class StudyTracker {
        constructor() {
          this.data = this.loadData();
          this.initializeDefaultTasks();
          this.setupNotifications();
          this.calculateStorageSize();
        }

        loadData() {
          const saved = localStorage.getItem("studyTrackerData");
          if (saved) {
            return JSON.parse(saved);
          }
          return {
            tasks: [],
            completedTasks: [],
            weeklyStats: { viola: 0, az204: 0, conducting: 0 },
            streak: 0,
            lastActivityDate: null,
            rewards: [],
            settings: { notificationsEnabled: false },
            customMotivations: [],
            weeklyHistory: [],
            practiceSessions: [],
          };
        }

        saveData() {
          localStorage.setItem("studyTrackerData", JSON.stringify(this.data));
          this.calculateStorageSize();
        }

        calculateStorageSize() {
          const dataString = JSON.stringify(this.data);
          const sizeInBytes = new Blob([dataString]).size;
          const sizeInKB = (sizeInBytes / 1024).toFixed(2);
          const sizeInMB = (sizeInKB / 1024).toFixed(2);

          const sizeText = sizeInMB > 1 ? `${sizeInMB} MB` : `${sizeInKB} KB`;
          const element = document.getElementById("storageSize");
          if (element) {
            element.textContent = sizeText;
          }
        }

        initializeDefaultTasks() {
          if (this.data.tasks.length === 0) {
            const defaultTasks = [
              {
                id: 1,
                description: "Escalas con cambio de posición",
                category: "viola",
                duration: 10,
                time: "06:30",
                completed: false,
                date: this.getTodayString(),
                note: "",
              },
              {
                id: 2,
                description: "Técnica específica o repertorio",
                category: "viola",
                duration: 15,
                time: "06:40",
                completed: false,
                date: this.getTodayString(),
                note: "",
              },
              {
                id: 3,
                description: "Lectura a primera vista",
                category: "viola",
                duration: 5,
                time: "06:55",
                completed: false,
                date: this.getTodayString(),
                note: "",
              },
              {
                id: 4,
                description: "Módulos AZ-204 WhizLabs",
                category: "az204",
                duration: 30,
                time: "07:00",
                completed: false,
                date: this.getTodayString(),
                note: "",
              },
              {
                id: 5,
                description: "Laboratorio práctico Azure",
                category: "az204",
                duration: 45,
                time: "20:00",
                completed: false,
                date: this.getTodayString(),
                note: "",
              },
              {
                id: 6,
                description: "Lectura dirección orquestal",
                category: "conducting",
                duration: 20,
                time: "20:45",
                completed: false,
                date: this.getTodayString(),
                note: "",
              },
            ];
            this.data.tasks = defaultTasks;
            this.saveData();
          }
        }

        getTodayString() {
          return new Date().toISOString().split("T")[0];
        }

        getDateString(offset = 0) {
          const date = new Date();
          date.setDate(date.getDate() + offset);
          return date.toISOString().split("T")[0];
        }

        addTask(task) {
          const newTask = {
            id: Date.now(),
            ...task,
            completed: false,
            date: this.getTodayString(),
            note: task.note || "",
          };
          this.data.tasks.push(newTask);
          this.saveData();
          this.renderTasks();
        }

        editTask(taskId, updatedTask) {
          const taskIndex = this.data.tasks.findIndex((t) => t.id === taskId);
          if (taskIndex !== -1) {
            this.data.tasks[taskIndex] = {
              ...this.data.tasks[taskIndex],
              ...updatedTask,
            };
            this.saveData();
            this.renderTasks();
          }
        }

        deleteTask(taskId) {
          this.data.tasks = this.data.tasks.filter((t) => t.id !== taskId);
          this.saveData();
          this.renderTasks();
        }

        copyTask(task) {
          const newTask = {
            ...task,
            id: Date.now(),
            date: this.getTodayString(),
            completed: false,
          };
          this.data.tasks.push(newTask);
          this.saveData();
          this.renderTasks();
        }

        copyYesterdayTasks() {
          const yesterday = this.getDateString(-1);
          const yesterdayTasks = this.data.tasks.filter(
            (task) => task.date === yesterday
          );

          if (yesterdayTasks.length === 0) {
            alert("No hay tareas del día anterior para copiar.");
            return;
          }

          yesterdayTasks.forEach((task) => {
            this.copyTask(task);
          });

          alert(
            `Se copiaron ${yesterdayTasks.length} tareas del día anterior.`
          );
        }

        completeTask(taskId) {
          const task = this.data.tasks.find((t) => t.id === taskId);
          if (task && !task.completed) {
            task.completed = true;
            task.completedAt = new Date().toISOString();
            this.data.weeklyStats[task.category] += task.duration;
            this.checkForRewards(task);
            this.updateStreak();
            this.saveData();
            this.renderAll();
            this.showCompletionAnimation();
            createCompletionSound();
          }
        }

        startTask(taskId) {
          const task = this.data.tasks.find((t) => t.id === taskId);
          if (task) {
            currentTask = task;
            showTab("timer");
            document.getElementById(
              "timerTaskName"
            ).textContent = `🎯 ${task.description}`;
            document.getElementById("timerDisplay").textContent =
              this.formatTime(task.duration * 60);
            timerStartTime = task.duration * 60;
            timerPaused = true;
            document.getElementById("startPauseBtn").textContent = "▶️ Iniciar";
          }
        }

        checkForRewards(task) {
          const rewards = [];
          const categoryHours = this.data.weeklyStats[task.category] / 60;

          if (
            categoryHours >= 1 &&
            !this.data.rewards.includes(`${task.category}_1h`)
          ) {
            rewards.push({
              id: `${task.category}_1h`,
              text: `🎯 Primera hora de ${task.category}!`,
            });
          }
          if (
            categoryHours >= 3 &&
            !this.data.rewards.includes(`${task.category}_3h`)
          ) {
            rewards.push({
              id: `${task.category}_3h`,
              text: `🔥 3 horas de ${task.category}!`,
            });
          }

          rewards.forEach((reward) => {
            this.data.rewards.push(reward.id);
            this.showReward(reward.text);
          });
        }

        showReward(text) {
          const rewardsSection = document.getElementById("rewardsSection");
          const badgesContainer = document.getElementById("rewardsBadges");

          const badge = document.createElement("div");
          badge.className = "reward-badge";
          badge.textContent = text;
          badgesContainer.appendChild(badge);

          rewardsSection.style.display = "block";
          setTimeout(() => {
            badge.remove();
            if (badgesContainer.children.length === 0) {
              rewardsSection.style.display = "none";
            }
          }, 5000);
        }

        showCompletionAnimation() {
          // Crear confetti effect mejorado
          const colors = [
            "#ff6b6b",
            "#4ecdc4",
            "#45b7d1",
            "#96ceb4",
            "#feca57",
            "#ff9ff3",
            "#54a0ff",
          ];

          for (let i = 0; i < 50; i++) {
            setTimeout(() => {
              const confetti = document.createElement("div");
              confetti.style.position = "fixed";
              confetti.style.left = Math.random() * 100 + "vw";
              confetti.style.top = "-10px";
              confetti.style.width = Math.random() * 10 + 5 + "px";
              confetti.style.height = confetti.style.width;
              confetti.style.background =
                colors[Math.floor(Math.random() * colors.length)];
              confetti.style.borderRadius = Math.random() > 0.5 ? "50%" : "0";
              confetti.style.pointerEvents = "none";
              confetti.style.animation = `fall ${
                Math.random() * 3 + 2
              }s linear forwards`;
              confetti.style.transform = `rotate(${Math.random() * 360}deg)`;
              document.body.appendChild(confetti);

              setTimeout(() => confetti.remove(), 5000);
            }, i * 50);
          }

          // Agregar CSS para la animación de caída
          if (!document.getElementById("confettiStyle")) {
            const style = document.createElement("style");
            style.id = "confettiStyle";
            style.textContent = `
                        @keyframes fall {
                            to {
                                transform: translateY(100vh) rotate(720deg);
                                opacity: 0;
                            }
                        }
                    `;
            document.head.appendChild(style);
          }
        }

        updateStreak() {
          const today = this.getTodayString();
          const hasCompletedTasksToday = this.data.tasks.some(
            (task) => task.date === today && task.completed
          );

          if (hasCompletedTasksToday) {
            if (this.data.lastActivityDate === this.getYesterdayString()) {
              this.data.streak++;
            } else if (this.data.lastActivityDate !== today) {
              this.data.streak = 1;
            }
            this.data.lastActivityDate = today;
          }
        }

        getYesterdayString() {
          const yesterday = new Date();
          yesterday.setDate(yesterday.getDate() - 1);
          return yesterday.toISOString().split("T")[0];
        }

        setupNotifications() {
          if ("Notification" in window && "serviceWorker" in navigator) {
            if (Notification.permission === "default") {
              document.getElementById("notificationPermission").style.display =
                "block";
            } else if (Notification.permission === "granted") {
              this.scheduleNotifications();
            }
          }
        }

        scheduleNotifications() {
          const today = this.getTodayString();
          const todayTasks = this.data.tasks.filter(
            (task) => task.date === today && !task.completed
          );

          todayTasks.forEach((task) => {
            if (task.time) {
              const taskTime = new Date(`${today}T${task.time}`);
              const now = new Date();

              if (taskTime > now) {
                const delay = taskTime.getTime() - now.getTime();
                setTimeout(() => {
                  new Notification(`🎯 Hora de: ${task.description}`, {
                    body: `Duración estimada: ${task.duration} minutos`,
                    icon: 'data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"%3E%3Cpath fill="%23663ab7" d="M12 2L2 7v10c0 5.55 3.84 12 9 12s9-6.45 9-12V7l-10-5z"/%3E%3C/svg%3E',
                  });
                }, delay);
              }
            }
          });
        }

        formatTime(seconds) {
          const hours = Math.floor(seconds / 3600);
          const minutes = Math.floor((seconds % 3600) / 60);
          const secs = seconds % 60;

          if (hours > 0) {
            return `${hours.toString().padStart(2, "0")}:${minutes
              .toString()
              .padStart(2, "0")}:${secs.toString().padStart(2, "0")}`;
          } else {
            return `${minutes.toString().padStart(2, "0")}:${secs
              .toString()
              .padStart(2, "0")}`;
          }
        }

        renderAll() {
          this.renderTasks();
          this.renderStats();
          this.renderAnalytics();
          this.renderWeeklyView();
          this.renderHistory();
          this.renderMotivations();
          this.loadDailyMotivation();
        }

        renderTasks() {
          const today = this.getTodayString();
          const todayTasks = this.data.tasks.filter(
            (task) => task.date === today
          );

          // Render today's tasks in dashboard
          const todayContainer = document.getElementById("todayTasks");
          todayContainer.innerHTML = "";

          // Render category-specific tasks
          const violaContainer = document.getElementById("violaTasks");
          const azContainer = document.getElementById("azTasks");
          const conductingContainer =
            document.getElementById("conductingTasks");

          violaContainer.innerHTML = "";
          azContainer.innerHTML = "";
          conductingContainer.innerHTML = "";

          todayTasks.forEach((task) => {
            const taskElement = this.createTaskElement(task);
            todayContainer.appendChild(taskElement.cloneNode(true));

            // Add to category-specific containers
            if (task.category === "viola") {
              violaContainer.appendChild(taskElement.cloneNode(true));
            } else if (task.category === "az204") {
              azContainer.appendChild(taskElement.cloneNode(true));
            } else if (task.category === "conducting") {
              conductingContainer.appendChild(taskElement.cloneNode(true));
            }
          });
        }

        createTaskElement(task) {
          const div = document.createElement("div");
          div.className = `task-item ${task.category} ${
            task.completed ? "completed" : ""
          }`;

          const categoryEmojis = {
            viola: "🎻",
            az204: "💻",
            conducting: "🎼",
          };

          div.innerHTML = `
                    <div class="task-main">
                        <input type="checkbox" class="task-checkbox" ${
                          task.completed ? "checked" : ""
                        } 
                               onchange="tracker.completeTask(${task.id})">
                        <div class="task-text">${
                          categoryEmojis[task.category]
                        } ${task.description}</div>
                        <div class="task-time">${task.time || ""} • ${
            task.duration
          }min</div>
                    </div>
                    ${
                      task.note
                        ? `<div class="task-note">📝 ${task.note}</div>`
                        : ""
                    }
                    <div class="task-actions">
                        ${
                          !task.completed
                            ? `<button class="task-btn start" onclick="tracker.startTask(${task.id})">⏱️ Iniciar</button>`
                            : ""
                        }
                        <button class="task-btn edit" onclick="openEditTaskModal(${
                          task.id
                        })">✏️ Editar</button>
                        <button class="task-btn copy" onclick="tracker.copyTask(${JSON.stringify(
                          task
                        ).replace(/"/g, "&quot;")})">📋 Copiar</button>
                        <button class="task-btn delete" onclick="tracker.deleteTask(${
                          task.id
                        })">🗑️</button>
                    </div>
                `;
          return div;
        }

        renderStats() {
          // Weekly hours
          document.getElementById("violaWeeklyHours").textContent =
            Math.round((this.data.weeklyStats.viola / 60) * 10) / 10 + "h";
          document.getElementById("azWeeklyHours").textContent =
            Math.round((this.data.weeklyStats.az204 / 60) * 10) / 10 + "h";
          document.getElementById("conductingWeeklyHours").textContent =
            Math.round((this.data.weeklyStats.conducting / 60) * 10) / 10 + "h";

          // Progress bars (goals: viola 3h, az204 5h, conducting 2h per week)
          const violaProgress = Math.min(
            (this.data.weeklyStats.viola / 60 / 3) * 100,
            100
          );
          const azProgress = Math.min(
            (this.data.weeklyStats.az204 / 60 / 5) * 100,
            100
          );
          const conductingProgress = Math.min(
            (this.data.weeklyStats.conducting / 60 / 2) * 100,
            100
          );

          document.getElementById("violaProgress").style.width =
            violaProgress + "%";
          document.getElementById("azProgress").style.width = azProgress + "%";
          document.getElementById("conductingProgress").style.width =
            conductingProgress + "%";
        }

        renderAnalytics() {
          const today = this.getTodayString();
          const todayTasks = this.data.tasks.filter(
            (task) => task.date === today
          );
          const completedToday = todayTasks.filter((task) => task.completed);

          const completionPercentage =
            todayTasks.length > 0
              ? Math.round((completedToday.length / todayTasks.length) * 100)
              : 0;

          document.getElementById("completedGoals").textContent =
            completionPercentage + "%";
          document.getElementById("currentStreak").textContent =
            this.data.streak;

          // Improvement area
          const categoryStats = {
            viola: this.data.weeklyStats.viola,
            az204: this.data.weeklyStats.az204,
            conducting: this.data.weeklyStats.conducting,
          };

          const minCategory = Object.keys(categoryStats).reduce((a, b) =>
            categoryStats[a] < categoryStats[b] ? a : b
          );

          const categoryNames = {
            viola: "Práctica de Viola",
            az204: "Certificación AZ-204",
            conducting: "Dirección de Orquesta",
          };

          document.getElementById("improvementArea").textContent =
            categoryNames[minCategory];

          // Simple weekly chart
          this.renderWeeklyChart();
        }

        renderWeeklyChart() {
          const chartContainer = document.getElementById("weeklyChart");
          const viola = this.data.weeklyStats.viola / 60;
          const az204 = this.data.weeklyStats.az204 / 60;
          const conducting = this.data.weeklyStats.conducting / 60;

          chartContainer.innerHTML = `
                    <div style="display: flex; align-items: end; height: 200px; gap: 20px; padding: 20px;">
                        <div style="flex: 1; text-align: center;">
                            <div style="background: #e74c3c; height: ${Math.max(
                              viola * 40,
                              10
                            )}px; border-radius: 5px; margin-bottom: 10px;"></div>
                            <div>🎻 Viola</div>
                            <div style="font-weight: bold;">${viola.toFixed(
                              1
                            )}h</div>
                        </div>
                        <div style="flex: 1; text-align: center;">
                            <div style="background: #3498db; height: ${Math.max(
                              az204 * 40,
                              10
                            )}px; border-radius: 5px; margin-bottom: 10px;"></div>
                            <div>💻 AZ-204</div>
                            <div style="font-weight: bold;">${az204.toFixed(
                              1
                            )}h</div>
                        </div>
                        <div style="flex: 1; text-align: center;">
                            <div style="background: #2ecc71; height: ${Math.max(
                              conducting * 40,
                              10
                            )}px; border-radius: 5px; margin-bottom: 10px;"></div>
                            <div>🎼 Dirección</div>
                            <div style="font-weight: bold;">${conducting.toFixed(
                              1
                            )}h</div>
                        </div>
                    </div>
                `;
        }

        renderWeeklyView() {
          const weekGrid = document.getElementById("weekGrid");
          const today = new Date();
          const startOfWeek = new Date(today);
          startOfWeek.setDate(
            today.getDate() - today.getDay() + currentWeekOffset * 7
          );

          const weekTitle = document.getElementById("currentWeekTitle");
          const weekStart = new Date(startOfWeek);
          const weekEnd = new Date(startOfWeek);
          weekEnd.setDate(weekEnd.getDate() + 6);

          weekTitle.textContent = `${weekStart.toLocaleDateString()} - ${weekEnd.toLocaleDateString()}`;

          weekGrid.innerHTML = "";

          const dayNames = ["Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sáb"];

          for (let i = 0; i < 7; i++) {
            const dayDate = new Date(startOfWeek);
            dayDate.setDate(startOfWeek.getDate() + i);
            const dateString = dayDate.toISOString().split("T")[0];

            const dayTasks = this.data.tasks.filter(
              (task) => task.date === dateString
            );

            const dayCard = document.createElement("div");
            dayCard.className = "day-card";

            const completedTasks = dayTasks.filter(
              (task) => task.completed
            ).length;
            const totalTasks = dayTasks.length;
            const completionRate =
              totalTasks > 0
                ? Math.round((completedTasks / totalTasks) * 100)
                : 0;

            dayCard.innerHTML = `
                        <div class="day-header">
                            ${dayNames[i]} ${dayDate.getDate()}
                            ${
                              totalTasks > 0
                                ? `<div style="font-size: 0.8rem; color: #666;">${completionRate}% (${completedTasks}/${totalTasks})</div>`
                                : ""
                            }
                        </div>
                        ${dayTasks
                          .map(
                            (task) => `
                            <div class="day-task ${task.category} ${
                              task.completed ? "completed" : ""
                            }" 
                                 style="border-left-color: ${
                                   task.category === "viola"
                                     ? "#e74c3c"
                                     : task.category === "az204"
                                     ? "#3498db"
                                     : "#2ecc71"
                                 };">
                                ${
                                  task.completed ? "✅" : "⏳"
                                } ${task.description.substring(0, 25)}${
                              task.description.length > 25 ? "..." : ""
                            }
                                <div style="font-size: 0.7rem; opacity: 0.8;">${
                                  task.duration
                                }min</div>
                            </div>
                        `
                          )
                          .join("")}
                    `;

            weekGrid.appendChild(dayCard);
          }
        }

        renderHistory() {
          const historyList = document.getElementById("historyList");
          if (!historyList) return;

          historyList.innerHTML = "";

          // Agrupar tareas completadas por semana
          const weeklyData = {};
          this.data.tasks
            .filter((task) => task.completed)
            .forEach((task) => {
              const taskDate = new Date(task.date);
              const weekStart = new Date(taskDate);
              weekStart.setDate(taskDate.getDate() - taskDate.getDay());
              const weekKey = weekStart.toISOString().split("T")[0];

              if (!weeklyData[weekKey]) {
                weeklyData[weekKey] = {
                  tasks: [],
                  stats: { viola: 0, az204: 0, conducting: 0 },
                };
              }

              weeklyData[weekKey].tasks.push(task);
              weeklyData[weekKey].stats[task.category] += task.duration;
            });

          Object.keys(weeklyData)
            .sort()
            .reverse()
            .forEach((weekKey) => {
              const weekData = weeklyData[weekKey];
              const weekEnd = new Date(weekKey);
              weekEnd.setDate(weekEnd.getDate() + 6);

              const historyItem = document.createElement("div");
              historyItem.className = "history-item";
              historyItem.innerHTML = `
                        <div>
                            <strong>Semana ${new Date(
                              weekKey
                            ).toLocaleDateString()} - ${weekEnd.toLocaleDateString()}</strong>
                            <div style="font-size: 0.9rem; color: #666;">
                                🎻 ${
                                  Math.round((weekData.stats.viola / 60) * 10) /
                                  10
                                }h | 
                                💻 ${
                                  Math.round((weekData.stats.az204 / 60) * 10) /
                                  10
                                }h | 
                                🎼 ${
                                  Math.round(
                                    (weekData.stats.conducting / 60) * 10
                                  ) / 10
                                }h
                                (${weekData.tasks.length} tareas)
                            </div>
                        </div>
                        <div>
                            <button class="task-btn delete" onclick="tracker.deleteWeekHistory('${weekKey}')">🗑️ Eliminar</button>
                        </div>
                    `;
              historyList.appendChild(historyItem);
            });
        }

        renderMotivations() {
          const motivationsList = document.getElementById("motivationsList");
          const customMotivationsList = document.getElementById(
            "customMotivationsList"
          );

          if (motivationsList) {
            motivationsList.innerHTML = this.data.customMotivations
              .map(
                (motivation, index) => `
                        <div class="history-item">
                            <div>${motivation}</div>
                            <button class="task-btn delete" onclick="tracker.deleteMotivation(${index})">🗑️</button>
                        </div>
                    `
              )
              .join("");
          }

          if (customMotivationsList) {
            customMotivationsList.innerHTML = this.data.customMotivations
              .map(
                (motivation, index) => `
                        <div class="history-item">
                            <div>${motivation}</div>
                            <button class="task-btn delete" onclick="tracker.deleteMotivation(${index})">🗑️</button>
                        </div>
                    `
              )
              .join("");
          }
        }

        addCustomMotivation(text) {
          if (text && text.trim()) {
            this.data.customMotivations.push(text.trim());
            this.saveData();
            this.renderMotivations();
          }
        }

        deleteMotivation(index) {
          this.data.customMotivations.splice(index, 1);
          this.saveData();
          this.renderMotivations();
        }

        deleteWeekHistory(weekKey) {
          if (
            confirm(
              "¿Estás seguro de que quieres eliminar esta semana del historial?"
            )
          ) {
            this.data.tasks = this.data.tasks.filter((task) => {
              const taskDate = new Date(task.date);
              const weekStart = new Date(taskDate);
              weekStart.setDate(taskDate.getDate() - taskDate.getDay());
              return weekStart.toISOString().split("T")[0] !== weekKey;
            });
            this.saveData();
            this.renderHistory();
          }
        }

        resetProgress() {
          if (
            confirm(
              "¿Estás seguro de que quieres reiniciar todo tu progreso? Esta acción no se puede deshacer."
            )
          ) {
            this.data.weeklyStats = { viola: 0, az204: 0, conducting: 0 };
            this.data.streak = 0;
            this.data.rewards = [];
            this.data.lastActivityDate = null;
            this.saveData();
            this.renderAll();
            alert("Progreso reiniciado exitosamente.");
          }
        }

        clearAllData() {
          if (
            confirm(
              "¿ESTÁS SEGURO? Esto eliminará TODOS tus datos permanentemente. Esta acción NO se puede deshacer."
            )
          ) {
            if (
              confirm(
                "ÚLTIMA CONFIRMACIÓN: ¿Realmente quieres eliminar todos los datos?"
              )
            ) {
              localStorage.removeItem("studyTrackerData");
              location.reload();
            }
          }
        }

        exportData() {
          const dataToExport = {
            ...this.data,
            exportDate: new Date().toISOString(),
            version: "1.0",
          };

          const dataStr = JSON.stringify(dataToExport, null, 2);
          const dataBlob = new Blob([dataStr], { type: "application/json" });
          const url = URL.createObjectURL(dataBlob);
          const link = document.createElement("a");
          link.href = url;
          link.download = `study-tracker-backup-${
            new Date().toISOString().split("T")[0]
          }.json`;
          link.click();
          URL.revokeObjectURL(url);
        }

        importData(jsonData) {
          try {
            const importedData = JSON.parse(jsonData);
            if (
              confirm(
                "¿Quieres reemplazar todos tus datos actuales con los datos importados?"
              )
            ) {
              this.data = { ...this.data, ...importedData };
              delete this.data.exportDate;
              delete this.data.version;
              this.saveData();
              this.renderAll();
              alert("Datos importados exitosamente.");
            }
          } catch (error) {
            alert(
              "Error al importar datos. Verifica que el archivo JSON sea válido."
            );
          }
        }

        generateWeekTemplate() {
          const template = {
            tasks: [
              {
                description: "Escalas con cambio de posición",
                category: "viola",
                duration: 10,
                time: "06:30",
              },
              {
                description: "Técnica específica o repertorio",
                category: "viola",
                duration: 15,
                time: "06:40",
              },
              {
                description: "Lectura a primera vista",
                category: "viola",
                duration: 5,
                time: "06:55",
              },
              {
                description: "Módulos AZ-204 WhizLabs",
                category: "az204",
                duration: 30,
                time: "07:00",
              },
              {
                description: "Laboratorio práctico Azure",
                category: "az204",
                duration: 45,
                time: "20:00",
              },
              {
                description: "Lectura dirección orquestal",
                category: "conducting",
                duration: 20,
                time: "20:45",
              },
            ],
          };

          const templateStr = JSON.stringify(template, null, 2);
          const templateBlob = new Blob([templateStr], {
            type: "application/json",
          });
          const url = URL.createObjectURL(templateBlob);
          const link = document.createElement("a");
          link.href = url;
          link.download = "plantilla-semanal-study-tracker.json";
          link.click();
          URL.revokeObjectURL(url);
        }

        async loadDailyMotivation() {
          const allMotivations = [
            "🎯 Cada pequeño paso te acerca más a tu meta. ¡Hoy es un gran día para practicar!",
            "🎼 La música y la tecnología se combinan en ti. ¡Eres único y talentoso!",
            "💪 A los 33 años tienes la experiencia y la determinación. ¡Es tu momento!",
            "🎻 Cada escala que practicas te hace mejor músico. ¡La constancia es clave!",
            "☁️ Azure espera por ti. Cada concepto aprendido te acerca a la certificación.",
            "🎵 Dirigir esa orquesta de niños es inspirador. ¡Estás marcando vidas!",
            "🌟 Balancear familia, trabajo y sueños no es fácil, pero lo estás logrando.",
            "🔥 Tu racha de constancia está creciendo. ¡No la rompas hoy!",
            "🎯 Pequeños momentos, grandes resultados. ¡Cada minuto cuenta!",
            "💫 Eres un ejemplo de perseverancia. ¡Tus hijas estarán orgullosas!",
            ...this.data.customMotivations,
          ];

          try {
            const randomMotivation =
              allMotivations[Math.floor(Math.random() * allMotivations.length)];
            document.getElementById("dailyMotivation").textContent =
              randomMotivation;
          } catch (error) {
            const fallbackMotivation =
              allMotivations[new Date().getDate() % allMotivations.length];
            document.getElementById("dailyMotivation").textContent =
              fallbackMotivation;
          }
        }

        addPracticeSession(category, duration) {
          const session = {
            id: Date.now(),
            category: category || "practice",
            duration: duration,
            date: this.getTodayString(),
            timestamp: new Date().toISOString(),
          };

          this.data.practiceSessions.push(session);
          if (category && this.data.weeklyStats[category] !== undefined) {
            this.data.weeklyStats[category] += Math.floor(duration / 60);
          }
          this.saveData();
          this.renderStats();
        }
      }

      // Timer Functions
      function toggleTimer() {
        if (!currentTask) return;

        if (timerPaused) {
          // Start timer
          timerPaused = false;
          const button = document.getElementById("startPauseBtn");
          button.textContent = "⏸️ Pausar";

          timerInterval = setInterval(() => {
            if (timerStartTime > 0) {
              timerStartTime--;
              document.getElementById("timerDisplay").textContent =
                tracker.formatTime(timerStartTime);
              updateTimerProgress();
            } else {
              // Timer finished
              clearInterval(timerInterval);
              timerFinished();
            }
          }, 1000);
        } else {
          // Pause timer
          timerPaused = true;
          clearInterval(timerInterval);
          document.getElementById("startPauseBtn").textContent = "▶️ Continuar";
        }
      }

      function resetTimer() {
        clearInterval(timerInterval);
        timerPaused = true;
        if (currentTask) {
          timerStartTime = currentTask.duration * 60;
          document.getElementById("timerDisplay").textContent =
            tracker.formatTime(timerStartTime);
          document.getElementById("startPauseBtn").textContent = "▶️ Iniciar";
          updateTimerProgress();
        }
      }

      function stopTimer() {
        clearInterval(timerInterval);
        timerPaused = true;
        if (
          currentTask &&
          confirm("¿Quieres marcar esta tarea como completada?")
        ) {
          tracker.completeTask(currentTask.id);
        }
        currentTask = null;
        document.getElementById("timerTaskName").textContent =
          "Selecciona una tarea para comenzar";
        document.getElementById("timerDisplay").textContent = "00:00";
        document.getElementById("startPauseBtn").textContent = "▶️ Iniciar";
        document.getElementById("timerProgress").innerHTML = "";
      }

      function updateTimerProgress() {
        if (!currentTask) return;

        const totalTime = currentTask.duration * 60;
        const elapsed = totalTime - timerStartTime;
        const percentage = (elapsed / totalTime) * 100;

        document.getElementById("timerProgress").innerHTML = `
                <div style="background: rgba(255,255,255,0.3); height: 10px; border-radius: 5px; overflow: hidden;">
                    <div style="background: white; height: 100%; width: ${percentage}%; transition: width 1s ease; border-radius: 5px;"></div>
                </div>
                <div style="margin-top: 10px; color: rgba(255,255,255,0.9);">
                    Progreso: ${Math.round(
                      percentage
                    )}% • Tiempo restante: ${tracker.formatTime(timerStartTime)}
                </div>
            `;
      }

      function timerFinished() {
        // Create completion animation
        const container = document.getElementById("timerContainer");
        container.classList.add("completion-animation");

        // Play completion sound
        createCompletionSound();

        // Show completion message
        document.getElementById("timerTaskName").textContent =
          "🎉 ¡Tarea Completada!";
        document.getElementById("timerDisplay").textContent = "✅ TERMINADO";
        document.getElementById("startPauseBtn").textContent = "▶️ Iniciar";

        // Auto-complete task
        if (currentTask) {
          tracker.completeTask(currentTask.id);
        }

        // Show notification
        if (Notification.permission === "granted") {
          new Notification("🎉 ¡Tarea Completada!", {
            body: `Has terminado: ${
              currentTask ? currentTask.description : "tu tarea"
            }`,
            icon: 'data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"%3E%3Cpath fill="%2327ae60" d="M12 2L2 7v10c0 5.55 3.84 12 9 12s9-6.45 9-12V7l-10-5z"/%3E%3C/svg%3E',
          });
        }

        // Reset after animation
        setTimeout(() => {
          container.classList.remove("completion-animation");
          currentTask = null;
          document.getElementById("timerTaskName").textContent =
            "Selecciona una tarea para comenzar";
          document.getElementById("timerProgress").innerHTML = "";
        }, 2000);
      }

      // Metronome Functions
      let currentBPM = 120;
      let metronomeRunning = false;

      function changeBPM(delta) {
        currentBPM = Math.max(40, Math.min(200, currentBPM + delta));
        document.getElementById("bpmDisplay").textContent = currentBPM;
        document.getElementById("bpmSlider").value = currentBPM;

        if (metronomeRunning) {
          stopMetronome();
          startMetronome();
        }
      }

      function setBPM(value) {
        currentBPM = parseInt(value);
        document.getElementById("bpmDisplay").textContent = currentBPM;

        if (metronomeRunning) {
          stopMetronome();
          startMetronome();
        }
      }

      function toggleMetronome() {
        if (metronomeRunning) {
          stopMetronome();
        } else {
          startMetronome();
        }
      }

      function startMetronome() {
        const interval = 60000 / currentBPM;
        metronomeRunning = true;
        document.getElementById("metronomeBtn").textContent =
          "⏸️ Parar Metrónomo";

        metronomeInterval = setInterval(() => {
          createMetronomeSound();
          const indicator = document.getElementById("metronomeIndicator");
          indicator.classList.add("beat");
          setTimeout(() => indicator.classList.remove("beat"), 100);
        }, interval);
      }

      function stopMetronome() {
        metronomeRunning = false;
        clearInterval(metronomeInterval);
        document.getElementById("metronomeBtn").textContent =
          "▶️ Iniciar Metrónomo";
        document.getElementById("metronomeIndicator").classList.remove("beat");
      }

      // Practice Timer Functions
      let practiceTimerRunning = false;
      let practiceElapsed = 0;

      function togglePracticeTimer() {
        if (practiceTimerRunning) {
          pausePracticeTimer();
        } else {
          startPracticeTimer();
        }
      }

      function startPracticeTimer() {
        practiceTimerRunning = true;
        practiceStartTime = Date.now() - practiceElapsed * 1000;
        document.getElementById("practiceTimerBtn").textContent = "⏸️ Pausar";

        practiceTimerInterval = setInterval(() => {
          practiceElapsed = Math.floor((Date.now() - practiceStartTime) / 1000);
          document.getElementById("practiceTimerDisplay").textContent =
            tracker.formatTime(practiceElapsed);
        }, 1000);
      }

      function pausePracticeTimer() {
        practiceTimerRunning = false;
        clearInterval(practiceTimerInterval);
        document.getElementById("practiceTimerBtn").textContent =
          "▶️ Continuar";
      }

      function resetPracticeTimer() {
        practiceTimerRunning = false;
        clearInterval(practiceTimerInterval);
        practiceElapsed = 0;
        document.getElementById("practiceTimerDisplay").textContent =
          "00:00:00";
        document.getElementById("practiceTimerBtn").textContent = "▶️ Iniciar";
      }

      function savePracticeSession() {
        if (practiceElapsed > 0) {
          const category = prompt(
            "¿Qué categoria fue esta práctica? (viola/az204/conducting)",
            "viola"
          );
          if (category && ["viola", "az204", "conducting"].includes(category)) {
            tracker.addPracticeSession(category, practiceElapsed);
            alert(
              `Sesión de práctica guardada: ${tracker.formatTime(
                practiceElapsed
              )} de ${category}`
            );
            resetPracticeTimer();
          } else if (category) {
            tracker.addPracticeSession("practice", practiceElapsed);
            alert(
              `Sesión de práctica libre guardada: ${tracker.formatTime(
                practiceElapsed
              )}`
            );
            resetPracticeTimer();
          }
        } else {
          alert("No hay tiempo registrado para guardar.");
        }
      }

      // Weekly Navigation
      function changeWeek(direction) {
        currentWeekOffset += direction;
        tracker.renderWeeklyView();
      }

      // Modal Functions
      function showTab(tabName) {
        // Hide all tab contents
        document.querySelectorAll(".tab-content").forEach((tab) => {
          tab.classList.remove("active");
        });

        // Remove active class from all tabs
        document.querySelectorAll(".tab").forEach((tab) => {
          tab.classList.remove("active");
        });

        // Show selected tab
        document.getElementById(tabName).classList.add("active");
        event.target.classList.add("active");
      }

      function openAddTaskModal(category = "") {
        document.getElementById("taskModalTitle").textContent =
          "➕ Agregar Nueva Tarea";
        document.getElementById("addTaskForm").reset();
        document.getElementById("addTaskModal").style.display = "block";
        if (category) {
          document.getElementById("taskCategory").value = category;
        }
        // Clear edit mode
        document.getElementById("addTaskForm").dataset.editId = "";
      }

      function openEditTaskModal(taskId) {
        const task = tracker.data.tasks.find((t) => t.id === taskId);
        if (!task) return;

        document.getElementById("taskModalTitle").textContent =
          "✏️ Editar Tarea";
        document.getElementById("taskDescription").value = task.description;
        document.getElementById("taskCategory").value = task.category;
        document.getElementById("taskDuration").value = task.duration;
        document.getElementById("taskTime").value = task.time || "";
        document.getElementById("taskNote").value = task.note || "";
        document.getElementById("addTaskForm").dataset.editId = taskId;
        document.getElementById("addTaskModal").style.display = "block";
      }

      function openMotivationModal() {
        document.getElementById("motivationModal").style.display = "block";
        tracker.renderMotivations();
      }

      function closeModal() {
        document.querySelectorAll(".modal").forEach((modal) => {
          modal.style.display = "none";
        });
      }

      function addCustomMotivation() {
        const text = document.getElementById("newMotivation").value;
        if (text.trim()) {
          tracker.addCustomMotivation(text);
          document.getElementById("newMotivation").value = "";
        }
      }

      function copyYesterdayTasks() {
        tracker.copyYesterdayTasks();
      }

      function requestNotificationPermission() {
        if ("Notification" in window) {
          Notification.requestPermission().then((permission) => {
            if (permission === "granted") {
              document.getElementById("notificationPermission").style.display =
                "none";
              tracker.data.settings.notificationsEnabled = true;
              tracker.saveData();
              tracker.scheduleNotifications();

              new Notification("¡Notificaciones Activadas! 🎉", {
                body: "Ahora recibirás recordatorios para tus prácticas.",
                icon: 'data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"%3E%3Cpath fill="%23663ab7" d="M12 2L2 7v10c0 5.55 3.84 12 9 12s9-6.45 9-12V7l-10-5z"/%3E%3C/svg%3E',
              });
            }
          });
        }
      }

      // Settings Functions
      function resetProgress() {
        tracker.resetProgress();
      }

      function clearSelectedHistory() {
        document.getElementById("historyModal").style.display = "block";

        // Generate checkboxes for weeks
        const historyCheckboxes = document.getElementById("historyCheckboxes");
        const weeklyData = {};

        tracker.data.tasks
          .filter((task) => task.completed)
          .forEach((task) => {
            const taskDate = new Date(task.date);
            const weekStart = new Date(taskDate);
            weekStart.setDate(taskDate.getDate() - taskDate.getDay());
            const weekKey = weekStart.toISOString().split("T")[0];

            if (!weeklyData[weekKey]) {
              weeklyData[weekKey] = 0;
            }
            weeklyData[weekKey]++;
          });

        historyCheckboxes.innerHTML = Object.keys(weeklyData)
          .sort()
          .reverse()
          .map((weekKey) => {
            const weekEnd = new Date(weekKey);
            weekEnd.setDate(weekEnd.getDate() + 6);
            return `
                    <div style="margin: 10px 0;">
                        <label style="display: flex; align-items: center;">
                            <input type="checkbox" value="${weekKey}" style="margin-right: 10px;">
                            Semana ${new Date(
                              weekKey
                            ).toLocaleDateString()} - ${weekEnd.toLocaleDateString()} (${
              weeklyData[weekKey]
            } tareas)
                        </label>
                    </div>
                `;
          })
          .join("");
      }

      function deleteSelectedHistory() {
        const checkboxes = document.querySelectorAll(
          '#historyCheckboxes input[type="checkbox"]:checked'
        );
        const selectedWeeks = Array.from(checkboxes).map((cb) => cb.value);

        if (selectedWeeks.length === 0) {
          alert("No se seleccionaron semanas para eliminar.");
          return;
        }

        if (
          confirm(
            `¿Estás seguro de que quieres eliminar ${selectedWeeks.length} semana(s) del historial?`
          )
        ) {
          selectedWeeks.forEach((weekKey) => {
            tracker.data.tasks = tracker.data.tasks.filter((task) => {
              const taskDate = new Date(task.date);
              const weekStart = new Date(taskDate);
              weekStart.setDate(taskDate.getDate() - taskDate.getDay());
              return weekStart.toISOString().split("T")[0] !== weekKey;
            });
          });

          tracker.saveData();
          tracker.renderHistory();
          closeModal();
          alert(
            `${selectedWeeks.length} semana(s) eliminada(s) del historial.`
          );
        }
      }

      function clearAllData() {
        tracker.clearAllData();
      }

      function exportData() {
        tracker.exportData();
      }

      function importData(event) {
        const file = event.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = function (e) {
            tracker.importData(e.target.result);
          };
          reader.readAsText(file);
        }
      }

      function downloadWeekTemplate() {
        tracker.generateWeekTemplate();
      }

      // Initialization
      let tracker;

      document.addEventListener("DOMContentLoaded", function () {
        tracker = new StudyTracker();
        tracker.renderAll();

        // Form submission
        document
          .getElementById("addTaskForm")
          .addEventListener("submit", function (e) {
            e.preventDefault();

            const task = {
              description: document.getElementById("taskDescription").value,
              category: document.getElementById("taskCategory").value,
              duration: parseInt(document.getElementById("taskDuration").value),
              time: document.getElementById("taskTime").value,
              note: document.getElementById("taskNote").value,
            };

            const editId = this.dataset.editId;
            if (editId) {
              tracker.editTask(parseInt(editId), task);
            } else {
              tracker.addTask(task);
            }

            closeModal();
          });

        // Close modal when clicking outside
        document.querySelectorAll(".modal").forEach((modal) => {
          modal.addEventListener("click", function (e) {
            if (e.target === this) {
              closeModal();
            }
          });
        });

        // Update stats every minute
        setInterval(() => {
          tracker.renderStats();
        }, 60000);

        // Reset weekly stats on Monday
        const today = new Date();
        const lastReset = localStorage.getItem("lastWeeklyReset");
        if (
          today.getDay() === 1 &&
          (!lastReset || new Date(lastReset).getDay() !== 1)
        ) {
          // Save current week to history before reset
          const currentStats = { ...tracker.data.weeklyStats };
          const weekStart = new Date(today);
          weekStart.setDate(today.getDate() - 7);

          tracker.data.weeklyHistory.push({
            weekStart: weekStart.toISOString().split("T")[0],
            stats: currentStats,
          });

          tracker.data.weeklyStats = { viola: 0, az204: 0, conducting: 0 };
          tracker.saveData();
          localStorage.setItem("lastWeeklyReset", today.toISOString());
        }

        // Install prompt for PWA
        let deferredPrompt;
        window.addEventListener("beforeinstallprompt", (e) => {
          e.preventDefault();
          deferredPrompt = e;

          // Show install button
          const installButton = document.createElement("button");
          installButton.textContent = "📱 Instalar App";
          installButton.className = "add-task-btn";
          installButton.style.position = "fixed";
          installButton.style.bottom = "20px";
          installButton.style.right = "20px";
          installButton.style.zIndex = "1000";
          installButton.style.boxShadow = "0 4px 20px rgba(0,0,0,0.3)";

          installButton.addEventListener("click", () => {
            deferredPrompt.prompt();
            deferredPrompt.userChoice.then((choiceResult) => {
              if (choiceResult.outcome === "accepted") {
                installButton.remove();
              }
              deferredPrompt = null;
            });
          });

          document.body.appendChild(installButton);
        });

        // Initialize audio context on first user interaction
        document.addEventListener("click", initAudio, { once: true });
        document.addEventListener("touchstart", initAudio, { once: true });
      });

      // Service Worker registration for PWA
      if ("serviceWorker" in navigator) {
        window.addEventListener("load", () => {
          const swCode = `
                    const CACHE_NAME = 'study-tracker-v2';
                    const urlsToCache = [
                        '/',
                        '/index.html',
                        '/manifest.json'
                    ];

                    self.addEventListener('install', event => {
                        event.waitUntil(
                            caches.open(CACHE_NAME)
                                .then(cache => cache.addAll(urlsToCache))
                        );
                        self.skipWaiting();
                    });

                    self.addEventListener('fetch', event => {
                        event.respondWith(
                            caches.match(event.request)
                                .then(response => {
                                    if (response) {
                                        return response;
                                    }
                                    return fetch(event.request);
                                })
                                .catch(() => {
                                    // Return a fallback page when offline
                                    return caches.match('/');
                                })
                        );
                    });

                    self.addEventListener('activate', event => {
                        event.waitUntil(
                            caches.keys().then(cacheNames => {
                                return Promise.all(
                                    cacheNames.map(cacheName => {
                                        if (cacheName !== CACHE_NAME) {
                                            return caches.delete(cacheName);
                                        }
                                    })
                                );
                            })
                        );
                    });

                    // Background sync for notifications
                    self.addEventListener('sync', event => {
                        if (event.tag === 'background-sync') {
                            event.waitUntil(doBackgroundSync());
                        }
                    });

                    function doBackgroundSync() {
                        // This would handle offline task completion sync
                        return Promise.resolve();
                    }

                    // Handle push notifications
                    self.addEventListener('push', event => {
                        const options = {
                            body: 'Es hora de practicar!',
                            icon: 'data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"%3E%3Cpath fill="%23663ab7" d="M12 2L2 7v10c0 5.55 3.84 12 9 12s9-6.45 9-12V7l-10-5z"/%3E%3C/svg%3E',
                            badge: 'data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"%3E%3Cpath fill="%23663ab7" d="M12 2L2 7v10c0 5.55 3.84 12 9 12s9-6.45 9-12V7l-10-5z"/%3E%3C/svg%3E',
                            vibrate: [100, 50, 100],
                            data: {
                                dateOfArrival: Date.now(),
                                primaryKey: '2'
                            },
                            actions: [
                                {
                                    action: 'explore', 
                                    title: 'Abrir App',
                                    icon: 'data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"%3E%3Cpath fill="%23663ab7" d="M12 2L2 7v10c0 5.55 3.84 12 9 12s9-6.45 9-12V7l-10-5z"/%3E%3C/svg%3E'
                                },
                                {
                                    action: 'close', 
                                    title: 'Cerrar',
                                    icon: 'data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"%3E%3Cpath fill="%23e74c3c" d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/%3E%3C/svg%3E'
                                }
                            ]
                        };

                        event.waitUntil(
                            self.registration.showNotification('Study Tracker Pro', options)
                        );
                    });

                    self.addEventListener('notificationclick', event => {
                        event.notification.close();

                        if (event.action === 'explore') {
                            event.waitUntil(clients.openWindow('/'));
                        } else if (event.action === 'close') {
                            event.notification.close();
                        } else {
                            event.waitUntil(clients.openWindow('/'));
                        }
                    });
                `;

          const blob = new Blob([swCode], { type: "application/javascript" });
          const swUrl = URL.createObjectURL(blob);

          navigator.serviceWorker
            .register(swUrl)
            .then((registration) => {
              console.log(
                "Service Worker registrado exitosamente:",
                registration
              );
            })
            .catch((registrationError) => {
              console.log(
                "Error al registrar Service Worker:",
                registrationError
              );
            });
        });
      }

      // Keyboard shortcuts
      document.addEventListener("keydown", function (e) {
        // Ctrl/Cmd + número para cambiar tabs
        if ((e.ctrlKey || e.metaKey) && e.key >= "1" && e.key <= "9") {
          e.preventDefault();
          const tabIndex = parseInt(e.key) - 1;
          const tabs = document.querySelectorAll(".tab");
          if (tabs[tabIndex]) {
            tabs[tabIndex].click();
          }
        }

        // Espacio para pausar/reanudar timer
        if (
          e.code === "Space" &&
          document.activeElement.tagName !== "INPUT" &&
          document.activeElement.tagName !== "TEXTAREA"
        ) {
          e.preventDefault();
          if (currentTask) {
            toggleTimer();
          } else if (practiceTimerRunning || practiceElapsed > 0) {
            togglePracticeTimer();
          }
        }

        // Escape para cerrar modales
        if (e.key === "Escape") {
          closeModal();
        }
      });

      // Touch gestures for mobile
      let touchStartX = 0;
      let touchStartY = 0;

      document.addEventListener("touchstart", function (e) {
        touchStartX = e.touches[0].clientX;
        touchStartY = e.touches[0].clientY;
      });

      document.addEventListener("touchend", function (e) {
        if (!touchStartX || !touchStartY) return;

        const touchEndX = e.changedTouches[0].clientX;
        const touchEndY = e.changedTouches[0].clientY;

        const diffX = touchStartX - touchEndX;
        const diffY = touchStartY - touchEndY;

        // Only handle horizontal swipes that are more horizontal than vertical
        if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
          const currentTab = document.querySelector(".tab.active");
          const allTabs = Array.from(document.querySelectorAll(".tab"));
          const currentIndex = allTabs.indexOf(currentTab);

          if (diffX > 0 && currentIndex < allTabs.length - 1) {
            // Swipe left - next tab
            allTabs[currentIndex + 1].click();
          } else if (diffX < 0 && currentIndex > 0) {
            // Swipe right - previous tab
            allTabs[currentIndex - 1].click();
          }
        }

        touchStartX = 0;
        touchStartY = 0;
      });

      // Auto-save functionality
      setInterval(() => {
        if (tracker) {
          tracker.saveData();
        }
      }, 30000); // Auto-save every 30 seconds

      // Prevent accidental page refresh
      window.addEventListener("beforeunload", function (e) {
        if (timerInterval || practiceTimerInterval || metronomeInterval) {
          e.preventDefault();
          e.returnValue =
            "¿Estás seguro de que quieres salir? Tienes un cronómetro o metrónomo activo.";
        }
      });

      // Dark mode support (respects system preference)
      if (
        window.matchMedia &&
        window.matchMedia("(prefers-color-scheme: dark)").matches
      ) {
        document.body.style.filter = "invert(0.9) hue-rotate(180deg)";
        document.body.style.background =
          "linear-gradient(135deg, #2c3e50 0%, #3498db 100%)";
      }

      // Handle visibility change (pause timers when tab is hidden)
      document.addEventListener("visibilitychange", function () {
        if (document.hidden) {
          // Page is hidden
          if (metronomeRunning) {
            stopMetronome();
          }
        }
      });

      // Add haptic feedback for mobile devices
      function vibrate(pattern = [100]) {
        if (navigator.vibrate) {
          navigator.vibrate(pattern);
        }
      }

      // Enhanced task completion with haptic feedback
      const originalCompleteTask = tracker.completeTask;
      tracker.completeTask = function (taskId) {
        vibrate([50, 100, 50]);
        return originalCompleteTask.call(this, taskId);
      };

      console.log("🎼 Study Tracker Pro inicializado correctamente!");
      console.log("Atajos de teclado:");
      console.log("- Ctrl/Cmd + 1-9: Cambiar tabs");
      console.log("- Espacio: Pausar/reanudar timer");
      console.log("- Escape: Cerrar modales");
      console.log("- Deslizar izquierda/derecha: Cambiar tabs (móvil)");
    </script>
  </body>
</html>
